# actionButton("show", "Login"),
verbatimTextOutput("dataInfo")
)
)
server = function(input, output,session) {
values <- reactiveValues(authenticated = FALSE)
# Return the UI for a modal dialog with data selection input. If 'failed'
# is TRUE, then display a message that the previous value was invalid.
dataModal <- function(failed = FALSE) {
modalDialog(
textInput("username", "Username:"),
passwordInput("password", "Password:"),
footer = tagList(
# modalButton("Cancel"),
actionButton("ok", "OK")
)
)
}
# Show modal when button is clicked.
# This `observe` is suspended only whith right user credential
obs1 <- observe({
showModal(dataModal())
})
# When OK button is pressed, attempt to authenticate. If successful,
# remove the modal.
obs2 <- observe({
req(input$ok)
isolate({
Username <- input$username
Password <- input$password
})
Id.username <- which(my_username == Username)
Id.password <- which(my_password == Password)
if (length(Id.username) > 0 & length(Id.password) > 0) {
if (Id.username == Id.password) {
Logged <<- TRUE
values$authenticated <- TRUE
obs1$suspend()
removeModal()
} else {
values$authenticated <- FALSE
}
}
})
output$dataInfo <- renderPrint({
if (values$authenticated) "OK!!!!!"
else "You are NOT authenticated"
})
}
shinyApp(ui,server)
rm(list = ls())
library(shiny)
library(shinydashboard)
my_username <- c("test1","test2")
my_password <- c("test1","test2")
###########################/ui.R/##################################
ui1 <- function(){
tagList(
div(id = "login",
wellPanel(textInput("userName", "Username"),
passwordInput("passwd", "Password"),
br(),
actionButton("Login", "Log in"),
verbatimTextOutput("dataInfo")
)
),
tags$style(type="text/css", "#login {font-size:10px;   text-align: left;position:absolute;top: 40%;left: 50%;margin-top: -100px;margin-left: -150px;}")
)}
ui2 <- function(){tagList(
"You did it!"
)}
header <- dashboardHeader(title = "Test Login")
sidebar <- dashboardSidebar()
body <- dashboardBody(
tags$head(tags$style("#dataInfo{color: red")),
htmlOutput("page")
)
ui <- dashboardPage(header, sidebar, body)
###########################/server.R/##################################
server = (function(input, output,session) {
Logged <- FALSE
Security <- TRUE
USER <- reactiveValues(Logged = Logged)
SEC <- reactiveValues(Security = Security)
observe({
if (USER$Logged == FALSE) {
if (!is.null(input$Login)) {
if (input$Login > 0) {
Username <- isolate(input$userName)
Password <- isolate(input$passwd)
if(my_username == Username & my_password == Password) {
USER$Logged <- TRUE
} else {SEC$Security <- FALSE}
}
}
}
})
observe({
if (USER$Logged == FALSE) {output$page <- renderUI({ui1()})}
if (USER$Logged == TRUE) {output$page <- renderUI({ui2()})}
})
observe({
output$dataInfo <- renderText({
if (SEC$Security) {""}
else {"Your username or password is not correct"}
})
})
})
runApp(list(ui = ui, server = server))
rm(list = ls())
library(shiny)
library(shinydashboard)
my_username <- c("test1","test2")
my_password <- c("test1","test2")
###########################/ui.R/##################################
ui1 <- function(){
tagList(
div(id = "login",
wellPanel(textInput("userName", "Username"),
passwordInput("passwd", "Password"),
br(),
actionButton("Login", "Log in"),
verbatimTextOutput("dataInfo")
)
),
tags$style(type="text/css", "#login {font-size:10px;   text-align: left;position:absolute;top: 40%;left: 50%;margin-top: -100px;margin-left: -150px;}")
)}
ui2 <- function(){tagList(
"You did it!"
)}
header <- dashboardHeader(title = "Test Login")
sidebar <- dashboardSidebar()
body <- dashboardBody(
tags$head(tags$style("#dataInfo{color: red")),
htmlOutput("page")
)
ui <- dashboardPage(header, sidebar, body)
###########################/server.R/##################################
server = (function(input, output,session) {
Logged <- FALSE
Security <- TRUE
USER <- reactiveValues(Logged = Logged)
SEC <- reactiveValues(Security = Security)
observe({
if (USER$Logged == FALSE) {
if (!is.null(input$Login)) {
if (input$Login > 0) {
Username <- isolate(input$userName)
Password <- isolate(input$passwd)
if(my_username == Username & my_password == Password) {
USER$Logged <- TRUE
} else {SEC$Security <- FALSE}
}
}
}
})
observe({
if (USER$Logged == FALSE) {output$page <- renderUI({ui1()})}
if (USER$Logged == TRUE) {output$page <- renderUI({ui2()})}
})
observe({
output$dataInfo <- renderText({
if (SEC$Security) {""}
else {"Your username or password is not correct"}
})
})
})
runApp(list(ui = ui, server = server))
rm(list = ls())
library(shiny)
library(shinydashboard)
my_username <- c("test1","test2")
my_password <- c("test1","test2")
###########################/ui.R/##################################
ui1 <- function(){
tagList(
div(id = "login",
wellPanel(textInput("userName", "Username"),
passwordInput("passwd", "Password"),
br(),
actionButton("Login", "Log in"),
verbatimTextOutput("dataInfo")
)
),
tags$style(type="text/css", "#login {font-size:10px;   text-align: left;position:absolute;top: 40%;left: 50%;margin-top: -100px;margin-left: -150px;}")
)}
ui2 <- function(){tagList(
"You did it!"
)}
header <- dashboardHeader(title = "Test Login")
sidebar <- dashboardSidebar()
body <- dashboardBody(
tags$head(tags$style("#dataInfo{color: red")),
htmlOutput("page")
)
ui <- dashboardPage(header, sidebar, body)
###########################/server.R/##################################
server = (function(input, output,session) {
Logged <- FALSE
Security <- TRUE
USER <- reactiveValues(Logged = Logged)
SEC <- reactiveValues(Security = Security)
observe({
if (USER$Logged == FALSE) {
if (!is.null(input$Login)) {
if (input$Login > 0) {
Username <- isolate(input$userName)
Password <- isolate(input$passwd)
if(my_username == Username & my_password == Password) {
USER$Logged <- TRUE
} else {SEC$Security <- FALSE}
}
}
}
})
observe({
if (USER$Logged == FALSE) {output$page <- renderUI({ui1()})}
if (USER$Logged == TRUE) {output$page <- renderUI({ui2()})}
})
observe({
output$dataInfo <- renderText({
if (SEC$Security) {""}
else {"Your username or password is not correct"}
})
})
})
runApp(list(ui = ui, server = server))
runApp('C:/Users/narendra.sahu/Downloads/ECL_Calculator')
runApp('C:/Users/narendra.sahu/Downloads/ECL_Calculator')
runApp('C:/Users/narendra.sahu/Downloads/ECL_Calculator')
runApp('C:/Users/narendra.sahu/Downloads/ECL_Calculator')
runApp('C:/Users/narendra.sahu/Downloads/ECL_Calculator')
runApp('C:/Users/narendra.sahu/Downloads/ECL_Calculator')
runApp('C:/Users/narendra.sahu/Downloads/ECL_Calculator')
runApp('C:/Users/narendra.sahu/Downloads/ECL_Calculator')
library(shiny)
library(shinydashboard)
my_username <- "test"
my_password <- "abc"
###########################/ui.R/##################################
header <- dashboardHeader(title = "my heading")
sidebar <- dashboardSidebar(uiOutput("sidebarpanel"))
body <- dashboardBody(uiOutput("body") )
ui <- dashboardPage(header, sidebar, body)
###########################/server.R/##################################
server <- function(input, output, session) {
Logged <- FALSE
USER <<- reactiveValues(Logged = Logged)
observe({
if (USER$Logged == FALSE) {
if (!is.null(input$Login)) {
if (input$Login > 0) {
Username <- isolate(input$userName)
Password <- isolate(input$passwd)
Id.username <- which(my_username == Username)
Id.password <- which(my_password == Password)
if (length(Id.username) > 0 & length(Id.password) > 0) {
if (Id.username == Id.password) {
USER$Logged <<- TRUE
}
}
}
}
}
})
output$sidebarpanel <- renderUI({
if (USER$Logged == TRUE) {
dashboardSidebar(
sidebarUserPanel("myuser", subtitle = a(icon("user"), "Logout", href="")),
selectInput("in_var", "myvar", multiple = FALSE,
choices = c("option 1","option 2")),
sidebarMenu(
menuItem("Item 1", tabName = "t_item1", icon = icon("line-chart")),
menuItem("Item 2", tabName = "t_item2", icon = icon("dollar")),
menuItem("Item 3", tabName = "t_item3", icon = icon("credit-card")),
menuItem("Item 4", tabName = "t_item4", icon = icon("share-alt"))
))}
})
output$body <- renderUI({
if (USER$Logged == TRUE) {
B <- c(2,3,4,3,7,5,4)
box(
title = p("Histogram", actionLink("Expand", "", icon = icon("expand"))), status = "primary", solidHeader = TRUE, width = 4,
hist(B)
)
}
if (USER$Logged == FALSE) {
box(title = "Login",textInput("userName", "Username"),
passwordInput("passwd", "Password"),
br(),
actionButton("Login", "Log in"))
}
})
}
shinyApp(ui, server)
runApp('C:/Users/narendra.sahu/Downloads/ECL_Calculator')
install.packages('gRain')
install.packages("BiocManager")
shiny::runApp('C:/Users/narendra.sahu/Downloads/ShinyApp_Nodes')
install.packages('DiagrammeR')
install.packages('DiagrammeR')
install.packages('DiagrammeR')
install.packages('circlize')
install.packages('circlize')
install.packages('circlize')
install.packages('DiagrammeR')
shiny::runApp('C:/Users/narendra.sahu/Downloads/ShinyApp_Nodes')
runApp('C:/Users/narendra.sahu/Downloads/ShinyApp_Nodes')
q()
data <- c(1,2,3,4,5,6,7,8)
output = mean(data)
output
output(data[-1])
mean(data[-1])
plot(BlackJack)
library(HydeNet)
library("HydeNet", lib.loc="~/R/win-library/3.5")
install.packages('rlang')
library("HydeNet", lib.loc="~/R/win-library/3.5")
install.packages('Rcpp')
library("HydeNet", lib.loc="~/R/win-library/3.5")
install.packages('purrr')
library(HydeNet)
plot(BlackJack)
install.packages('htmltools')
plot(BlackJack)
install.packages('backports')
plot(BlackJack)
plot(BlackJack,
customNodes = customNode(payoff,
fillcolor = "purple", shape = "circle",
fontcolor = "white", height = "2",
style="filled"))
shiny::runApp('BayesianNetwork')
install.packages('later')
shiny::runApp('BayesianNetwork')
install.packages('promises')
shiny::runApp('BayesianNetwork')
install.packages('DT')
shiny::runApp('BayesianNetwork')
install.packages('pingr')
shiny::runApp('BayesianNetwork')
plot(BlackJack)
plot(BlackJack,
customNodes = customNode(payoff,
fillcolor = "purple", shape = "circle",
fontcolor = "white", height = "2",
style="filled"))
runApp('BayesianNetwork')
getwd()
rm(list=ls())
library(HydeNet)
plot(BlackJack)
library(HydeNet)
plot(BlackJack)
shiny::runApp('BayesianNetwork')
shiny::runApp('BayesianNetwork')
library(rmarkdown)
library(png)
library(ggplot2)
library(knitr)
includgetwd()
getwd()
setwd("C:/Users/narendra.sahu/Documents/BayesianNetwork/")
load('CyberAttack.RData')
shiny::runApp()
network %>% mapping_Hydenet_network %>% HydeNetwork %>% plot_hydenet
network %>% mapping_Hydenet_network %>% HydeNetwork %>% plot_hydenet -> plot1
typeof(plot1)
str(plot1)
save_graph(plot1)
?save_graph
save_graph(plot1,'plot1')
savePlot()
plot1
savePlot()
image(plot1)
plot1 %>% as.graphicsAnnot
plot1 %>% as.graphAM
graph_from_adj_list(plot1,mode="all",duplicate=FALSE)
install.packages('igraph')
install.packages("igraph")
graph_from_adj_list(plot1,mode="all",duplicate=FALSE)
library(igraph)
install.packages("igraph")
library(igraph)
graph_from_adj_list(plot1,mode="all",duplicate=FALSE)
graph_from_data_frame(plot1, directed = FALSE, vertices = NULL)
install.packages("DiagrammeRsvg")
library(DiagrammeRsvg)
DiagrammeRsvg::export_svg(plot1)
?DiagrammeRsvg::export_svg
plot2<- export_svg(plot1)
plot(plot2)
save.image(plot2)
library(htmltools)
html_print(HTML(plot2))
plot1
plot2
network %>% mapping_Hydenet_network %>% HydeNetwork %>% plot_hydenet %>%  export_svg %>% html_print(HTML)
shiny::runApp()
network %>% mapping_Hydenet_network %>% HydeNetwork %>% plot_hydenet %>%  export_svg %>% html_print(HTML)
network %>% mapping_Hydenet_network %>% HydeNetwork %>% plot_hydenet %>%  export_svg
html_print(HTML(plot1))
plot1 <- network %>% mapping_Hydenet_network %>% HydeNetwork %>% plot_hydenet
plot1
plot2 <- export_svg(plot1)
html_print(HTML(plot2))
runApp()
plot(html_print(HTML(plot2)))
save(html_print(HTML(plot2)),'sn.html')
# sim$Occurence <- with(sim, ifelse(toupper(Fraud) == "TRUE", 1, 0)  )
# sim$Loss <- Impact * Exposure * Occurence
# hist(quantile(sim["Loss"], probs = c(0.90, 0.95, 0.975, 0.99, 0.995, 0.999, 0.9999, 0.999999)))
# str_replace_all(formulaI,network[["Impact"]]$Parents, paste(network[["Impact"]]$Parents, paste('%>% as.character %>% as.integer')) )
# graphviz.chart(bnlearn_net_fit, type = 'barprob', layout = 'dot')
# bn.fit.barchart(bnlearn_net_fit[["Fraud"]],panel=function(x,y,subscripts,...){
#   panel.grid(h=-1,v=0)
#   panel.barchart(...)
#   panel.text(bnlearn_net_fit[["Fraud"]]$prob,bnlearn_net_fit[["Fraud"]]$prob, labels=t$y, pos=3)
# })
library(htmlwidgets)
widgetThumbnail <- function(p, thumbName, width = 1024, height = 768) {
phantom <- findPhantom()
success <- FALSE
if(phantom == "") {
message("** phantomjs dependency could not be found - thumbnail cannot be generated (run phantomInstall() for details)")
} else {
res <- try({
ff <- paste0(thumbName, ".html")
ffjs <- paste0(thumbName, ".js")
# don't want any padding
p$sizingPolicy$padding <- 0
suppressMessages(saveWidget(p, ff, selfcontained = FALSE))
js <- paste0("var page = require('webpage').create();
page.viewportSize = { width: ", width,", height: ", height," };
page.clipRect = { top: 0, left: 0, width: ", width,", height: ", height," };
page.open('", ff, "', function(status) {
console.log(\"Status: \" + status);
if(status === \"success\") {
page.render('", thumbName, ".png');
}
phantom.exit();
});")
cat(js, file = ffjs)
system2(phantom, ffjs)
})
if(!inherits(res, "try-error")) {
success <- TRUE
}
if(!file.exists(paste0(thumbName, ".png"))) {
success <- FALSE
}
}
if(!success) {
message("** could not create htmlwidget thumbnail... creating an empty thumbnail...")
}
}
#' Get instructions on how to install phantomjs
#' @export
phantomInstall <- function() {
message("Please visit this page to install phantomjs on your system: http://phantomjs.org/download.html")
}
# similar to webshot
findPhantom <- function() {
phantom <- Sys.which("phantomjs")
if(Sys.which("phantomjs") == "") {
if(identical(.Platform$OS.type, "windows")) {
phantom <- Sys.which(file.path(Sys.getenv("APPDATA"), "npm", "phantomjs.cmd"))
}
}
phantom
}
library(networkD3)
widgetThumbnail(p = plot2, thumbName = "plot", height = 500)
widgetThumbnail(p = html_print(HTML(plot2)), thumbName = "plot", height = 500)
widgetThumbnail(p = plot1, thumbName = "plot", height = 500)
install.packages("phantomjs")
library(htmlwidgets)
library(networkD3)
widgetThumbnail(p = plot1, thumbName = "plot", height = 500)
if (is.null(suppressMessages(webshot:::find_phantom()))) { webshot::install_phantomjs() }
widgetThumbnail(p = plot1, thumbName = "plot", height = 500)
webshot::install_phantomjs()
widgetThumbnail(p = plot1, thumbName = "plot", height = 500)
widgetThumbnail(p = plot2, thumbName = "plot", height = 500)
simpleNetwork(network)
simpleNetwork(plot1)
save_graph(plot2,'plot2.png')
save_graph(plot2,'plot2\1.png')
save_graph(plot2,'plot1.png')
save_graph(html_print(HTML(plot2)),'plot1.png')
save(html_print(HTML(plot2)))
save(html_print(HTML(plot2)), file = 'fiii.png')
save_html(plot2)
save_html(plot2,file='file.html')
webshot("file.html",file = "temp.png",cliprect = "viewport")
webshot::webshot("file.html",file = "temp.png",cliprect = "viewport")
save_html(html_print(HTML(plot2)),file='file.html')
webshot::webshot("file.html",file = "temp.png",cliprect = "viewport")
save_html(plot1,file='file.html')
webshot::webshot("file.html",file = "temp.png",cliprect = "viewport")
runApp()
runApp()
Sys.Date()
?include_graphics
runApp()
runApp()
model_name
runApp()
runApp()
runApp()
