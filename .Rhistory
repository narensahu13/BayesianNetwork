runApp('Scenario-expansion/Model 2')
cat('aaa')
runApp('Scenario-expansion/Model 2')
rm(list=ls())
runApp('Scenario-expansion/Model 2')
rm(list=ls())
rm(list=ls())
runApp('Scenario-expansion/Model 2')
rm(list=ls())
shiny::runApp('Scenario-expansion/Model 2')
rm(list=ls())
runApp('Scenario-expansion/Model 2')
rm(list=ls())
runApp('Scenario-expansion/Model 2')
con <- dbConnect(odbc(), 'ScenarioET_DB')
con <- dbConnect(odbc(), 'ScenarioET')
df <- dbSendQuery(con, "Select * FROM [ScenarioET_DB].[dbo].[INPUT_TAB]") %>% dbFetch()
df.head(2)
head(sf,2)
head(df,2)
ncol(df)
a <- rep('diff', times=31)
df1 <- rbind(a, df)
df1 <- rbind(a, data.frame(lapply(df, as.character), stringsAsFactors = F) )
df1 %>% head(2)
getwd()
write.csv(df1, file='output.csv')
rm(list=ls())
runApp('Scenario-expansion/Model 2')
rm(list=ls())
write.csv(df1, file='output.csv', row.names = F)
con <- dbConnect(odbc(), 'ScenarioET')
df <- dbSendQuery(con, "Select * FROM [ScenarioET_DB].[dbo].[INPUT_TAB]") %>% dbFetch()
df1 <- rbind(a, data.frame(lapply(df, as.character), stringsAsFactors = F) )
a <- rep('diff', times=31)
df1 <- rbind(a, data.frame(lapply(df, as.character), stringsAsFactors = F) )
write.csv(df1, file='output.csv', row.names = F)
runApp('Scenario-expansion/Model 2')
rm(list=ls())
runApp('Scenario-expansion/Model 2')
shiny::runApp('Scenario-expansion/Model 2')
runApp('Scenario-expansion/Model 2')
con <- dbConnect(odbc(), ScenarioET)
con <- dbConnect(odbc(), ScenarioET)
con <- dbConnect(odbc(), 'ScenarioET')
inputdata <-  con %>%
dbSendQuery( "Select * FROM [ScenarioET_DB].[dbo].[INPUT_TAB]") %>%
dbFetch()
head(inputdata,2)
write.csv(inputdata, 'output.csv', na=NULL, row.names = F)
runApp('Scenario-expansion/Model 2')
write.csv(inputdata, 'output.csv', na=NULL, row.names = F)
write.csv(inputdata, 'output.csv', row.names = F, na = NULL)
?write.csv
write.csv(inputdata, 'output.csv', row.names = F, na = "")
getwd()
runApp('Scenario-expansion/Model 2')
View(inputdata)
runApp('Scenario-expansion/Model 2')
runApp('Scenario-expansion/Model 2')
runApp('Scenario-expansion/Model 2')
shiny::runApp('Scenario-expansion/Model 2')
runApp('Scenario-expansion/Model 2')
runApp('Scenario-expansion/Model 2')
runApp('Scenario-expansion/Model 2')
runApp('Scenario-expansion/Model 2')
runApp('Scenario-expansion/Model 2')
runApp('Scenario-expansion/Model 2')
rm(list=ls())
runApp('Scenario-expansion/Model 2')
runApp('Scenario-expansion/Model 2')
plot_data %>% head(3)
data.tsa %>% head(3)
?as.Date()
runApp('Scenario-expansion/Model 2')
runApp('Scenario-expansion/Model 2')
runApp('Scenario-expansion/Model 2')
runApp('Scenario-expansion/Model 2')
shiny::runApp('Scenario-expansion/Model 2')
con <<- dbConnect(odbc(), input$dbname)
con <<- dbConnect(odbc(), ScenarioET)
con <<- dbConnect(odbc(), 'ScenarioET')
library(odbc)
library(DBI)
con <<- dbConnect(odbc(), 'ScenarioET')
library(dplyr)
inputda <-  con %>%
dbSendQuery( "Select * FROM [ScenarioET_DB].[dbo].[OUTPUT_TAB]") %>%
dbFetch()
inputda %>% head(3)
inputda <-  con %>%
dbSendQuery( "SELECT a.[Model ID], a.Date, c.ScenarioName, a.[Prop/LogNormal/Absolute/Level], b.TickerName, a.Spot FROM FCT_TickerTS as a
LEFT JOIN DIM_Ticker as b ON a.TickerId = b.TickerId
LEFT JOIN DIM_Scenario as c ON a.[Scenario ID] = c.ScenarioID") %>%
dbFetch()
inputda %>% head(3)
inputda %>% melt(TickerName)
library(plyr)
library(reshape2)
inputda %>% melt(TickerName)
inputda %>% melt('TickerName')
daat
data
airquality
shiny::runApp('Scenario-expansion/Model 2')
t(inputda)
inputda
inputda %>% head(2)
inputda %>% gather(TickerName)
inputda %>% spread(TickerName)
inputda %>% spread('TickerName')
inputda %>% spread(TickerName)
unique(inputda$TickerName)
inputda %>% spread(TickerName, Spot)
inputda %>% spread(TickerName, Spot, Prop/LogNormal/Absolute/Level)
inputda %>% spread(TickerName, Spot, `Prop/LogNormal/Absolute/Level``)
inputda %>% spread(TickerName, Spot, `Prop/LogNormal/Absolute/Level`)
inputda %>% spread(TickerName, Spot, `Prop/LogNormal/Absolute/Level`)
inputda %>% spread(TickerName, `Prop/LogNormal/Absolute/Level`)
inputda %>% spread(TickerName, `Prop/LogNormal/Absolute/Level`, Spot)
inputda %>% spread(c(TickerName, `Prop/LogNormal/Absolute/Level`), Spot)
inputda %>% spread(TickerName, Spot)
View(inputda)
inputda[-`Prop/LogNormal/Absolute/Level`] %>% spread(TickerName, Spot)
inputda[-Date]
inputda[-'Date']
inputda[-4]
inputda[-4] %>% spread(TickerName, Spot)
rbind(inputda[4,5] %>% t,   inputda[-4] %>% spread(TickerName, Spot))
inputda[4,5] %>% t
inputda[c(4,5)] %>% t
inputda[c(4,5)]
inputda[c(4,5)] %>% unique
inputda[c(4,5)] %>% unique %>% t
inputda[c(5,4)] %>% unique %>% t
inputda[c(5,4)] %>% unique %>% t %>% as.data.frame()
inputda[-4] %>% spread(TickerName, Spot)
shock.mat.pred.view.final
runApp('Scenario-expansion/Model 2')
runApp('BayesianNetwork')
runApp('Scenario-expansion/Model 2')
library(shiny)
library(datasets)
script <- "$('tbody tr td:nth-child(5)').each(function() {
var cellValue = $(this).text();
if (cellValue > 50) {
$(this).css('background-color', '#0c0');
}
else if (cellValue <= 50) {
$(this).css('background-color', '#f00');
}
})"
runApp(list(
ui = basicPage(
tags$head(tags$script(HTML('Shiny.addCustomMessageHandler("jsCode", function(message) { eval(message.value); });'))),
tableOutput("view")
),
server = function(input, output, session) {
session$onFlushed(function() {
session$sendCustomMessage(type='jsCode', list(value = script))
})
output$view <- renderTable({
head(rock, n = 20)
})
}
))
library(shiny)
library(datasets)
script <- "$('tbody tr td:nth-child(5)').each(function() {
var cellValue = $(this).text();
if (cellValue > 50) {
$(this).css('background-color', '#0c0');
}
else if (cellValue <= 50) {
$(this).css('background-color', '#f00');
}
})"
runApp(list(
ui = basicPage(
tags$head(tags$script(HTML('Shiny.addCustomMessageHandler("jsCode", function(message) { eval(message.value); });'))),
tableOutput("view")
),
server = function(input, output, session) {
session$onFlushed(function() {
session$sendCustomMessage(type='jsCode', list(value = script))
})
output$view <- renderTable({
head(rock, n = 20)
})
}
))
runApp('Scenario-expansion/Model 2')
runApp('Scenario-expansion/Model 2')
runApp('Scenario-expansion/Model 2')
runApp('Scenario-expansion/Model 2')
network[[node_ID]]$CPT
rm(list=ls())
runApp('BayesianNetwork')
setwd("~/BayesianNetwork/")
load('Fraudmodel.RData')
network$Intensity
node_ID <- "Intensity"
network[[node_ID]]$CPT
network[[node_ID]]$CPT %>% transform_CPT
transform_CPT
load('CyberAttack.RData')
network$CyberAttack$CPT
network$CyberAttack$CPT %>% transform_CPT
network$LossRate
runApp()
load('BuildingDestruction.RData')
runApp('~/Scenario-expansion/Model 2')
runApp('~/Scenario-expansion/Model 2')
shock.mat.pred.view.final %>% as.matrix
length(shock.mat.pred.view.final)
shock.mat.pred.view.final[c(-1)]
shock.mat.pred.view.final[c(-1,-length(shock.mat.pred.view.final))]
shock.mat.pred.view.final[c(-1,-length(shock.mat.pred.view.final), -length(shock.mat.pred.view.final)-1)]
shock.mat.pred.view.final[c(-1,-length(shock.mat.pred.view.final), -length(shock.mat.pred.view.final)+1)]
shock.mat.pred.view.final[c(-1,-length(shock.mat.pred.view.final), -length(shock.mat.pred.view.final)+1)] %>% as.matrix
shock.mat.pred.view.final[c(-1,-length(shock.mat.pred.view.final), -length(shock.mat.pred.view.final)+1)] %>% unlist
shock.mat.pred.view.final[c(-1,-length(shock.mat.pred.view.final), -length(shock.mat.pred.view.final)+1)] %>% c
shock.mat.pred.view.final[c(-1,-length(shock.mat.pred.view.final), -length(shock.mat.pred.view.final)+1)] %>% matrix
shock.mat.pred.view.final[c(-1,-length(shock.mat.pred.view.final), -length(shock.mat.pred.view.final)+1)] %>% as.matrix
shock.mat.pred.view.final[c(-1,-length(shock.mat.pred.view.final), -length(shock.mat.pred.view.final)+1)] %>% as.matrix -> val
val
runApp('~/Scenario-expansion/Model 2')
shock.mat.pred.view.final
runApp('~/Scenario-expansion/Model 2')
runApp('~/Scenario-expansion/Model 2')
runApp('~/Scenario-expansion/Model 2')
rm(list=ls())
runApp('~/Scenario-expansion/Model 2')
View(shock.mat.pred.view.final)
shock.mat.pred.view.final
rm(list=ls())
runApp('~/Scenario-expansion/Model 2')
View(shock.mat.pred.view.final)
runApp('~/Scenario-expansion/Model 2')
View(shock.mat.pred.view.final)
runApp('~/Scenario-expansion/Model 2')
runApp('~/Scenario-expansion/Model 2')
runApp('~/Scenario-expansion/Model 2')
runApp('~/Scenario-expansion/Model 2')
runApp('~/Scenario-expansion/Model 2')
rm(list=ls())
library(shiny)
library(DT)
RV <- reactiveValues(data = mtcars)
app <- shinyApp(
ui <- fluidPage(
DT::dataTableOutput("mytable"),
actionButton("do", "Click Me")
),
server = function(input, output,session) {
#Load the mtcars table into a dataTable
output$mytable = DT::renderDataTable({
RV$data
})
#A test action button
observeEvent(input$do, {
RV$data$cyl <- RV$data$cyl * 10
})
}
)
runApp(app)
runApp('~/Scenario-expansion/Model 2')
runApp('~/Scenario-expansion/Model 2')
runApp('~/Scenario-expansion/Model 2')
View(shock.mat.pred.view.final)
?DT::datatable
runApp('~/Scenario-expansion/Model 2')
runApp('~/Scenario-expansion/Model 2')
runApp('~/Scenario-expansion/Model 2')
shock.mat.pred.view.final
library(shiny)
library(DT)
shinyApp(
ui = fluidPage(
DT::dataTableOutput("x1"),
actionButton("opt_run", "Run"),
tags$h1("Expected Output"),
DT::dataTableOutput("x2")
),
server = function(input, output, session) {
df <- data.table(Channel = c("A", "B","C"),
Current = c("2000", "3000","4000"),
Modified = c("2500", "3500","3000"),
New_Membership = c("450", "650","700"))
output$x1 = renderDT(df, selection = 'none', editable = TRUE)
expdf <- data.table(Channel = c("A", "B","C"),
Current = c("3000", "3000","5000"),
Modified = c("3500", "3500","6000"),
New_Membership = c("650", "650","1100"))
output$x2 = renderDT(expdf, selection = 'none', editable = TRUE)
})
}
)
library(shiny)
library(DT)
options(stringsAsFactors = F)
df <- data.frame(Channel = c("A", "B","C"),
Current = c("2000", "3000","4000"),
Modified = c("2500", "3500","3000"),
New_Membership = c("450", "650","700"))
expdf <- data.frame(Channel = c("A", "B","C"),
Current = c("3000", "3000","5000"),
Modified = c("3500", "3500","6000"),
New_Membership = c("650", "650","1100"))
shinyApp(
ui = fluidPage(
DT::dataTableOutput("x1"),
tags$h1("Expected Output"),
DT::dataTableOutput("x2")
),
server = function(input, output, session) {
output$x1 = renderDT(df, selection = 'none', editable = TRUE)
observeEvent(input$x1_cell_edit, {
df[input$x1_cell_edit$row,input$x1_cell_edit$col] <<- input$x1_cell_edit$value
})
output$x2 = renderDT(expdf, selection = 'none', editable = TRUE)
observeEvent(input$x2_cell_edit, {
expdf[input$x2_cell_edit$row,input$x2_cell_edit$col] <<- input$x2_cell_edit$value
})
})
}
)
library(shiny)
library(DT)
options(stringsAsFactors = F)
df <- data.frame(Channel = c("A", "B","C"),
Current = c("2000", "3000","4000"),
Modified = c("2500", "3500","3000"),
New_Membership = c("450", "650","700"))
expdf <- data.frame(Channel = c("A", "B","C"),
Current = c("3000", "3000","5000"),
Modified = c("3500", "3500","6000"),
New_Membership = c("650", "650","1100"))
shinyApp(
ui = fluidPage(
DT::dataTableOutput("x1"),
tags$h1("Expected Output"),
DT::dataTableOutput("x2")
),
server = function(input, output, session) {
output$x1 = renderDT(df, selection = 'none', editable = TRUE)
observeEvent(input$x1_cell_edit, {
df[input$x1_cell_edit$row,input$x1_cell_edit$col] <<- input$x1_cell_edit$value
})
output$x2 = renderDT(expdf, selection = 'none', editable = TRUE)
observeEvent(input$x2_cell_edit, {
expdf[input$x2_cell_edit$row,input$x2_cell_edit$col] <<- input$x2_cell_edit$value
})
})
}
)
rm(list=ls())
runApp('~/Scenario-expansion/Model 2')
runApp('~/Scenario-expansion/Model 2')
View(shock.mat.pred.view.final)
runApp('~/Scenario-expansion/Model 2')
runApp('~/Scenario-expansion/Model 2')
runApp('~/Scenario-expansion/Model 2')
runApp('~/Scenario-expansion/Model 2')
runApp('~/Scenario-expansion/Model 2')
runApp('~/Scenario-expansion/Model 2')
runApp('~/Scenario-expansion/Model 2')
View(shock.mat.pred.view.final)
runApp('~/Scenario-expansion/Model 2')
View(shock.mat.pred.view.final)
runApp('~/Scenario-expansion/Model 2')
View(shock.mat.pred.view.final)
runApp('~/Scenario-expansion/Model 2')
View(shock.mat.pred.view.final)
runApp('~/Scenario-expansion/Model 2')
View(shock.mat.pred.view.final)
runApp('~/Scenario-expansion/Model 2')
View(shock.mat.pred.view.final)
runApp('~/Scenario-expansion/Model 2')
View(shock.mat.pred.view.final)
runApp('~/Scenario-expansion/Model 2')
View(shock.mat.pred.view.final)
runApp('~/Scenario-expansion/Model 2')
View(shock.mat.pred.view.final)
runApp('~/Scenario-expansion/Model 2')
runApp('~/Scenario-expansion/Model 2')
View(shock.mat.pred.view.final)
runApp('~/Scenario-expansion/Model 2')
View(shock.mat.pred.view.final)
runApp('~/Scenario-expansion/Model 2')
runApp('~/Scenario-expansion/Model 2')
View(shock.mat.pred.view.final)
runApp('~/Scenario-expansion/Model 2')
runApp('~/Scenario-expansion/Model 2')
View(shock.mat.pred.view.final)
runApp('~/Scenario-expansion/Model 2')
View(shock.mat.pred.view.final)
rm(list=ls())
runApp('~/Scenario-expansion/Model 2')
View(shock.mat.pred.view.final)
runApp('~/Scenario-expansion/Model 2')
rm(list=ls())
runApp('~/Scenario-expansion/Model 2')
View(shock.mat.pred.view.final)
runApp('~/Scenario-expansion/Model 2')
View(shock.mat.pred.view.final)
rm(list=ls())
runApp('~/Scenario-expansion/Model 2')
View(shock.mat.pred.view.final)
runApp('~/Scenario-expansion/Model 3')
rm(list=ls())
runApp('~/Scenario-expansion/Model 3')
runApp('~/Scenario-expansion/Model 3')
runApp('~/Scenario-expansion/Model 3')
runApp('~/Scenario-expansion/Model 3')
runApp('~/Scenario-expansion/Model 3')
rm(list=ls())
runApp('~/Scenario-expansion/Model 3')
rm(list=ls())
runApp('~/Scenario-expansion/Model 3')
runApp('~/Scenario-expansion/Model 3')
runApp('~/Scenario-expansion/Model 3')
rm(list=ls())
runApp('~/Scenario-expansion/Model 3')
runApp('~/Scenario-expansion/Model 3')
runApp('~/Scenario-expansion/Model 3')
runApp('~/Scenario-expansion/Model 2')
rm(list=ls())
runApp('~/Scenario-expansion/Model 2')
runApp('~/Scenario-expansion/Model 2')
rm(list=ls())
runApp('~/Scenario-expansion/Model 2')
rm(list=ls())
runApp('~/Scenario-expansion/Model 2')
rm(list=ls())
runApp('~/Scenario-expansion/Model 2')
rm(list=ls())
runApp('~/Scenario-expansion/Model 3')
rm(list=ls())
runApp('~/Scenario-expansion/Model 3')
rm(list=ls())
runApp('~/Scenario-expansion/Model 3')
rm(list=ls())
runApp('~/Scenario-expansion/Model 3')
rm(list=ls())
runApp('~/Scenario-expansion/Model 3')
rm(list=ls())
runApp('~/Scenario-expansion/Model 3')
rm(list=ls())
runApp('~/Scenario-expansion/Model 3')
runApp('~/Scenario-expansion/Model 2')
data.tsa
originaldata.indicator
inputdata
plot_data <<- prepare_inputplot(inputdata, filetype)
plot_data
inputdata
plot_data
inputdata
inputdata %>%  .[-1,] %>% dplyr::select(-Scenario)
prepare_inputplot <- function(inputdata, filetype='local') {
#vars <- my_data %>% dplyr::filter(Run_Id == runid) %>% dplyr::select(Independent) %>% as.character %>% strsplit(',') %>% unlist
if(has_name(inputdata,'Date')) {
newdf <- inputdata %>%  .[-1,] %>% dplyr::select(-Scenario)  %>% melt('Date') # dplyr::select(c(Date, vars)) %>% melt('Date')
if(filetype == 'local') {
newdf$Date <- as.Date(newdf$Date, "%d-%m-%Y")
} else if(filetype == 'server') {
newdf$Date <- as.Date(newdf$Date, "%Y-%m-%d")
}
newdf$value <- as.numeric(newdf$value)
}
return(newdf)
}
plot_data <<- prepare_inputplot(inputdata, filetype)
plot_data
data.tsa
rm(list=ls())
runApp('~/Scenario-expansion/Model 3')
runApp('~/Scenario-expansion/Model 3')
runApp('~/Scenario-expansion/Model 3')
rm(list=ls())
runApp('~/Scenario-expansion/Model 3')
!exists('inputdata'
)
rm(list=ls())
runApp('~/Scenario-expansion/Model 3')
rm(list=ls())
runApp('~/Scenario-expansion/Model 3')
rm(list=ls())
runApp('~/Scenario-expansion/Model 3')
rm(list=ls())
runApp('~/Scenario-expansion/Model 3')
rm(list=ls())
runApp('~/Scenario-expansion/Model 3')
runApp('~/Scenario-expansion/Model 3')
rm(list=ls())
runApp('~/Scenario-expansion/Model 3')
View(analysists)
analysists %>% dplyr::filter(Variable_Name = 'Date')
analysists %>% dplyr::filter(Variable_Name = Date)
analysists %>% dplyr::filter(Variable_Name == Date)
analysists %>% dplyr::filter(Variable_Name == 'Date')
analysists %>% dplyr::filter(!Variable_Name == 'Date')
rm(list=ls())
runApp('~/Scenario-expansion/Model 3')
rm(list=ls())
runApp('~/Scenario-expansion/Model 3')
install.packages(c("pool", "uuid"))
runApp('~/Scenario-expansion/Model 3')
runApp('~/Employee_Directory_CRUD')
runApp('~/Employee_Directory_CRUD')
runApp('~/Scenario-expansion/Model 3')
